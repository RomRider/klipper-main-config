[gcode_macro START_PRINT]
variable_ercf: 0
variable_prime_x_min: 1
variable_prime_y_min: 20
gcode:
  {% set svv = printer.save_variables.variables %}
  {% if 'firmware_retraction' in printer %}
    {% set RETRACT_LENGTH = params.RETRACT_LENGTH|default(printer.configfile.settings.firmware_retraction.retract_length, true)|float %}
    {% set RETRACT_SPEED = params.RETRACT_SPEED|default(printer.configfile.settings.firmware_retraction.retract_speed, true)|float %}
    {% set UNRETRACT_EXTRA_LENGTH = params.UNRETRACT_EXTRA_LENGTH|default(printer.configfile.settings.firmware_retraction.unretract_extra_length, true)|float %}
    {% set UNRETRACT_SPEED = params.UNRETRACT_SPEED|default(printer.configfile.settings.firmware_retraction.unretract_speed, true)|float %}
  {% endif %}
  {% set BED_TEMP = params.BED_TEMP|default(60, true)|int %}
  {% set NOZZLE_TEMP = params.NOZZLE_TEMP|default(200, true)|int %}
  {% set NOZZLE_TEMP_WAIT = NOZZLE_TEMP - 80 if (NOZZLE_TEMP - 80) > 40 else 40 %}
  {% if 'safe_z_home' in printer.configfile.settings %}
    {% set MOVE_SPEED = printer.configfile.settings.safe_z_home.speed | int %}
  {% else %}
    {% set MOVE_SPEED = 100 %}
  {% endif %}
  {% if params.ERCF|lower == "true" %}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=ercf VALUE=1
    _ERCF_RESET_STATS
  {% else %}
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=ercf VALUE=0
  {% endif %}

  # Set prime line position
  {% if 'AREA_START' in params and 'AREA_END' in params %}
    {% set area_min_x = params.AREA_START.split(",")[0]|float - printer["gcode_macro VARIABLES"].mesh_area_offset + 1 %}
    {% set area_min_y = params.AREA_START.split(",")[1]|float - printer["gcode_macro VARIABLES"].mesh_area_offset + 1 %}
    {% set area_max_x = params.AREA_END.split(",")[0]|float + printer["gcode_macro VARIABLES"].mesh_area_offset - 1 %}
    {% set area_max_y = params.AREA_END.split(",")[1]|float + printer["gcode_macro VARIABLES"].mesh_area_offset - 1 %}

    {% set prime_x_min = area_min_x if printer.toolhead.axis_minimum.x < area_min_x else printer.toolhead.axis_minimum.x + 1 %}
    {% set prime_y_min = area_min_y if printer.toolhead.axis_minimum.y < area_min_y else printer.toolhead.axis_minimum.y + 1 %}
  {% endif %}

  CLEAR_PAUSE
  M220 S100 ;Reset Feedrate
  M221 S100 ;Reset Flowrate
  SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} SQUARE_CORNER_VELOCITY={printer.toolhead.square_corner_velocity} ;Reset Accell
  G21 ; set units to millimeters
  G90 ; use absolute coordinates
  M82 ; use absolute distances for extrusion
  G92 E0
  {% if 'neopixel leds' in printer.configfile.settings and svv.neopixel_auto == 1 %}
    LED_HEATING
  {% endif %}

  _DISABLE_FILAMENT_SENSOR

  ; lift Z if printer is using a probe to avoid temperature drift
  {% if 'probe' in printer.configfile.settings %}
    M104 S{ NOZZLE_TEMP_WAIT } ;start heating hotend
    {% if printer.toolhead.homed_axes != "xyz" %}
      M117 Homing...
      G28 ;home all
    {% endif %}
    {% if BED_TEMP > 0 %}
      G0 Z100 F1200
    {% endif %}
  {% endif %}

  M117 Heating Bed...
  M190 S{ BED_TEMP } ;Wait for bed to reach temp before proceeding

  ; Rehome Z if printer is using a probe to have accurate Z=0
  {% if 'probe' in printer.configfile.settings %}
    # Make sure the probe is at stable temperature before Mesh
    M109 S{ NOZZLE_TEMP_WAIT }
    {% if BED_TEMP > 0 %}
      M117 Homing Z...
      G28 Z
    {% endif %}
  {% else %}
    {% if printer.toolhead.homed_axes != "xyz" %}
      M117 Homing...
      G28 ;home all
    {% endif %}
  {% endif %}
  M104 S{ NOZZLE_TEMP_WAIT } ;start heating hotend
  {% if 'AREA_START' in params and 'AREA_END' in params %}
    G29 AREA_START={params.AREA_START} AREA_END={params.AREA_END}
  {% else %}
    G29
  {% endif %}

  {% if 'firmware_retraction' in printer %}
    SET_RETRACTION RETRACT_LENGTH={ RETRACT_LENGTH } RETRACT_SPEED={ RETRACT_SPEED } UNRETRACT_EXTRA_LENGTH={ UNRETRACT_EXTRA_LENGTH } UNRETRACT_SPEED={ UNRETRACT_SPEED }
  {% endif %}

  M117 Heating Hotend...
  M104 S{ NOZZLE_TEMP }
  G1 X{prime_x_min} Y{prime_y_min} F{ (MOVE_SPEED * 60) | int } ;Move to Prime position
  G1 Z0.4 F3000 ;Move to Prime position
  M109 S{ NOZZLE_TEMP } ;Wait for hotend temp

  G21 ; set units to millimeters
  G90 ; use absolute coordinates
  {% if params.RELATIVE_E | lower == "true" %}
    M83
  {% else %}
    M82 ; use absolute distances for extrusion
  {% endif %}
  G92 E0
  {% if params.ERCF|lower == "true" %}
    {% if printer["gcode_macro _ERCF_VAR"].clog_detection|int == 1 %}
      SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
    {% endif %}
    _ERCF_CHANGE_TOOL_STANDALONE TOOL={ params.ERCF_TOOL }
    PRIME_LINE LENGTH=150 {% if 'AREA_START' in params and 'AREA_END' in params %}AREA_START={params.AREA_START} AREA_END={params.AREA_END}{% endif %}
  {% else %}
    PRIME_LINE {% if 'AREA_START' in params and 'AREA_END' in params %}AREA_START={params.AREA_START} AREA_END={params.AREA_END}{% endif %}
  {% endif %}

  M117
  {% if 'neopixel leds' in printer.configfile.settings and svv.neopixel_auto == 1 %}
    LED_WHITE
  {% endif %}

  {% if params.ERCF|lower == "true" %}
    {% if printer["gcode_macro _ERCF_VAR"].clog_detection|int == 1 %}
      SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=1
    {% endif %}
  {% else %}
    _ENABLE_FILAMENT_SENSOR
  {% endif %}

[gcode_macro PRIME_LINE]
variable_default_prime_speed: 60
variable_default_prime_length: 15
gcode:
  SAVE_GCODE_STATE NAME=prime_line
  {% if 'LENGTH' in params %}
    {% set length = params.LENGTH | default(default_prime_length, true) | float %}
  {% else %}
    {% set length = printer["gcode_macro VARIABLES"].prime_length | default(default_prime_length, true) %}
  {% endif %}
  {% set debug = params.DEBUG | default(0) | int %}
  {% set speed = (printer["gcode_macro VARIABLES"].prime_speed | default(default_prime_speed, true)) | int * 60 %}

  {% if 'AREA_START' in params and 'AREA_END' in params %}
    {% set area_min_x = params.AREA_START.split(",")[0]|float - printer["gcode_macro VARIABLES"].mesh_area_offset + 1 %}
    {% set area_min_y = params.AREA_START.split(",")[1]|float - printer["gcode_macro VARIABLES"].mesh_area_offset + 1 %}
    {% set area_max_x = params.AREA_END.split(",")[0]|float + printer["gcode_macro VARIABLES"].mesh_area_offset - 1 %}
    {% set area_max_y = params.AREA_END.split(",")[1]|float + printer["gcode_macro VARIABLES"].mesh_area_offset - 1 %}

    {% set x_min = area_min_x if printer.toolhead.axis_minimum.x < area_min_x else printer.toolhead.axis_minimum.x + 1 %}
    {% set y_min = area_min_y if printer.toolhead.axis_minimum.y < area_min_y else printer.toolhead.axis_minimum.y + 1 %}
    {% set x_max = area_max_x if printer.toolhead.axis_maximum.x > area_max_x else printer.toolhead.axis_maximum.x - 1 %}
    {% set y_max = area_max_y if printer.toolhead.axis_maximum.y > area_max_y else printer.toolhead.axis_maximum.y - 1 %}
  {% else %}
    {% set x_min = printer["gcode_macro START_PRINT"].prime_x_min %}
    {% set y_min = printer["gcode_macro START_PRINT"].prime_y_min %}
    {% set y_max = 200 if printer.toolhead.axis_maximum.y > 220 else printer.toolhead.axis_maximum.y - 20 %}
    {% set x_max = x_min + 5 %}
  {% endif %}

  {% if y_max - y_min > 180 %}
    {% set y_max = y_min + 180 %}
    {% if y_max > printer.toolhead.axis_maximum.y %}
      {% set y_max = printer.toolhead.axis_maximum.y - 1 %}
    {% endif %}
  {% endif %}
  {% if x_max - x_min > 180 %}
    {% set x_max = x_min + 180 %}
    {% if x_max > printer.toolhead.axis_maximum.x %}
      {% set x_max = printer.toolhead.axis_maximum.x - 1 %}
    {% endif %}
  {% endif %}

  {% set ns = namespace(x=x_min, y=y_min) %}
  {% set z = 0.28 if not debug else 10 %}
  {% set xy_inc = 0.3 %}
  {% set vertical = x_max - x_min < y_max - y_min %}
  {% if vertical %}
    {% set e_inc = 15.0 / 180 * (y_max - y_min) %}
  {% else %}
    {% set e_inc = 15.0 / 180 * (x_max - x_min) %}
  {% endif %}
  {% set iter = ((length / e_inc) | round | int) %}
  {% if iter == 0 %}
    {% set iter = 1 %}
  {% endif %}
  # avoid priming into the print
  {% if iter * xy_inc > printer["gcode_macro VARIABLES"].mesh_area_offset - 1 %}
    {% set iter = ((printer["gcode_macro VARIABLES"].mesh_area_offset - 1) / xy_inc) | abs | int %}
  {% endif %}

  G21 ; set units to millimeters
  G90 ; use absolute coordinates
  M83 ; use relative distances for extrusion
  G92 E0

  {% if printer.extruder.can_extrude|lower == 'true' or debug %}
    M117 Prime Line...
    G1 Z{z} F5000
    {% for i in range(iter) %}
      G1 X{ns.x} Y{ns.y} Z{z} F5000.0
      {% if vertical %}
        {% set ns.y = y_max if ns.y < y_max else y_min %}
      {% else %}
        {% set ns.x = x_max if ns.x < x_max else x_min %}
      {% endif %}
      G1 X{ns.x} Y{ns.y} Z{z}{% if not debug %} E{e_inc}{% endif %} F{speed}
      {% if debug %}
        {action_respond_info("Would have extruded %.2fmm" % e_inc)}
      {% endif %}
      {% if not loop.last %}
        {% if vertical %}
          {% set ns.x = ns.x + xy_inc %}
        {% else %}
          {% set ns.y = ns.y + xy_inc %}
        {% endif %}
      {% endif %}
    {% endfor %}
    G92 E0 ;Reset Extruder
    G1 X{ns.x - 0.3} Y{ns.y - 0.3} Z2.0 F3000 ;Move Z Axis up
    M117
  {% else %}
    {action_respond_info("Extruder not hot enough")}
  {% endif %}
  RESTORE_GCODE_STATE NAME=prime_line

[gcode_macro END_PRINT]
variable_z_lift: 10
gcode:
  {% set svv = printer.save_variables.variables %}
  {% set lift = 10 %}
  {% if 'probe' in printer.configfile.settings %}
    {% set lift = 50 %}
  {% endif %}
  M220 S100
  G91 ;Relative positioning
  _SAFE_Z_MOVE LIFT=0.2
  G1 X5 Y5 F3000 ;Wipe out
  G1 E-2 F3600
  SET_VELOCITY_LIMIT ACCEL={printer.configfile.settings.printer.max_accel} ACCEL_TO_DECEL={printer.configfile.settings.printer.max_accel_to_decel} ;restore accel
  _PARK_HEAD_END LIFT={lift}
  G1 E-2 F3600
  M106 S0 ;Turn-off fan
  M104 S0 ;Turn-off hotend
  M140 S0 ;Turn-off bed
  {% if printer['gcode_macro START_PRINT'].ercf|int == 1 %}
    {% if params.UNLOAD_AT_END | default(0) | int == 1 %}
      {% if printer["gcode_macro _ERCF_VAR"].clog_detection|int == 1 %}
        SET_FILAMENT_SENSOR SENSOR=encoder_sensor ENABLE=0
      {% endif %}
      ERCF_EJECT
    {% endif %}
    _ENABLE_FILAMENT_SENSOR
    SET_IDLE_TIMEOUT TIMEOUT={printer.configfile.settings.idle_timeout.timeout}
  {% endif %}
  M84 X Y E ;Disable all steppers but Z

  {% if 'neopixel leds' in printer.configfile.settings and svv.neopixel_auto == 1 %}
    LED_SUCCESS
  {% endif %}
