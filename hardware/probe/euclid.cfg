#  |
#  |                                * Probe Ready Position
#  |                                  X150 Y150
#  |
#  | â€¦
#  |
#  | * Dock Re-entry staging  position
#  |   X0 Y70
#  |
#  |
#  | * Dock Exit Position
#  |   X0 Y40
#  |
#  |
#  |
#  |
#  |
#  |   X0 Y0    X30 Y0       X100 Y0
#  | * Dock   * Dock Side  * Dock Preflight
#  |_____________________________________________________________
#
# With the coupling magnets +/- 2mm of the nozzle the probe trigger height is on
# the order of 12mm, so 15mm is used as a safe height.

[gcode_macro _VAR_EUCLID_PROBE]
description: config vars for Euclid probe deploy/stow

## how much space to put between the bed and nozzle for homing
variable_bed_clearance: 15

## where to put the probe during deployment steps
variable_position_preflight: [ 30, 60 ]
variable_position_side:      [  30, 1 ]
variable_position_dock:      [   3, 1 ]
## exit/re-entry staging
variable_position_exit:      [   3, 60 ]

variable_batch_mode_enabled: False
variable_probe_state: None

gcode:
    RESPOND TYPE=command MSG="{ printer['gcode_macro _VAR_EUCLID_PROBE'] }"

[probe]
# pin: ^PG11

## w/ MFBS mods
x_offset: -44.49
y_offset: -17

## if live-z is positive, subtract from z_offset
z_offset: 9.455

speed: 5                     ; probing speed of 5mm/second ideal is <10mm/sec
lift_speed: 30
samples: 3                   ; number of probes to perform per sample
sample_retract_dist: 2
lift_speed: 5.0
samples_result: median
samples_tolerance: 0.02
samples_tolerance_retries: 5

[gcode_macro _ASSERT_PROBE_STATE]
description: ensures probe is in a known state; QUERY_PROBE must have been called before this macro!
gcode:
    ## QUERY_PROBE manually-verified results, when microswitch not depressed
    ## "TRIGGERED" -> 1 :: probe stowed
    ## "open"      -> 0 :: probe deployed
    {% set last_query_state = "stowed" if printer.probe.last_query == 1 else "deployed" %}

    {% if params.MUST_BE != last_query_state %}
        { action_raise_error("expected probe state to be {} but is {} ({})".format(params.MUST_BE, last_query_state, printer.probe.last_query)) }
    {% else %}
        ## all good; update state
        SET_GCODE_VARIABLE MACRO=_VAR_EUCLID_PROBE VARIABLE=probe_state VALUE="'{ last_query_state }'"
    {% endif %}

[gcode_macro _ASSERT_PROBE_DEPLOYED]
description: error if probe not deployed
gcode:
    ; wait for moves to finish, then pause 0.25s for detection
    M400
    G4 P100

    QUERY_PROBE
    _ASSERT_PROBE_STATE MUST_BE=deployed

[gcode_macro _ASSERT_PROBE_STOWED]
description: error if probe not stowed
gcode:
    ; wait for moves to finish, then pause 0.25s for detection
    M400
    G4 P100

    QUERY_PROBE
    _ASSERT_PROBE_STATE MUST_BE=stowed

[gcode_macro _HOME_XY_AND_STOW_IF_DEPLOYED]
gcode:
    {% set last_query_state = "stowed" if printer.probe.last_query == 1 else "deployed" %}
    {% if last_query_state == "deployed" %}
        G28 Y
        G28 X
        _EUCLID_PROBE_END_BATCH
    {% endif %}



[gcode_macro _STOW_PROBE_IF_DEPLOYED]
gcode:
    M400
    G4 P100

    QUERY_PROBE
    _HOME_XY_AND_STOW_IF_DEPLOYED

[gcode_macro _EUCLID_PROBE_BEGIN_BATCH]
description: begin euclid probe batch mode
gcode:
    SET_GCODE_VARIABLE MACRO=_VAR_EUCLID_PROBE VARIABLE=batch_mode_enabled VALUE=True
    RESPOND TYPE=command MSG="Probe batch mode enabled"

[gcode_macro _EUCLID_PROBE_END_BATCH]
description: end euclid probe batch mode and stow probe
gcode:
    SET_GCODE_VARIABLE MACRO=_VAR_EUCLID_PROBE VARIABLE=batch_mode_enabled VALUE=False
    RESPOND TYPE=command MSG="Probe batch mode disabled"
    STOW_PROBE


[gcode_macro DEPLOY_PROBE]
description: deploy Euclid probe
gcode:
    {% set euclid_probe = printer["gcode_macro _VAR_EUCLID_PROBE"] %}
    {% if 'gcode_macro VARIABLES' in printer and printer['gcode_macro VARIABLES'].macro_travel_speed is defined %}
      {% set speed = printer['gcode_macro VARIABLES'].macro_travel_speed | float * 60 %}
    {% else %}
      {% set speed = 100 * 60 %}
    {% endif %}
    {% set z_speed = printer["gcode_macro VARIABLES"].macro_z_speed|float * 60 %}
    {% if euclid_probe.batch_mode_enabled and euclid_probe.probe_state == "deployed" %}
        ; RESPOND TYPE=command MSG="Probe batch mode enabled: already deployed"
        G4 P0
    {% else %}
        SAVE_GCODE_STATE NAME=deploy_probe
        RESPOND TYPE=command MSG="Deploying probe"

        ; ensure the probe is currently stowed; can't deploy what isn't stowed.
        _ASSERT_PROBE_STOWED

        G90

        ; set approach elevation to clear probe over bed on fixed gantry machine
        G0 Z{euclid_probe.bed_clearance} F{z_speed}

        ; move the carraige to safe position to start probe pickup
        G0 X{euclid_probe.position_preflight[0]} Y{euclid_probe.position_preflight[1]} F{speed}

        ;  move to the side of the dock
        G0 X{euclid_probe.position_side[0]} Y{euclid_probe.position_side[1]} F{speed}

        ;  move sideways over the dock to pick up probe
        G0 X{euclid_probe.position_dock[0]} Y{euclid_probe.position_dock[1]} F{speed}

        ; move out of the dock in a straight line
        G0 X{euclid_probe.position_exit[0]} Y{euclid_probe.position_exit[1]} F{speed}

        ; confirm deploy was successful
        _ASSERT_PROBE_DEPLOYED

        RESTORE_GCODE_STATE NAME=deploy_probe
    {% endif %}

[gcode_macro STOW_PROBE]
description: stow Euclid probe
gcode:
    {% set euclid_probe = printer["gcode_macro _VAR_EUCLID_PROBE"] %}
    {% if 'gcode_macro VARIABLES' in printer and printer['gcode_macro VARIABLES'].macro_travel_speed is defined %}
      {% set speed = printer['gcode_macro VARIABLES'].macro_travel_speed | float * 60 %}
    {% else %}
      {% set speed = 100 * 60 %}
    {% endif %}
    {% set z_speed = printer["gcode_macro VARIABLES"].macro_z_speed|float * 60 %}
    {% if euclid_probe.batch_mode_enabled %}
        ; RESPOND TYPE=command MSG="Probe batch mode enabled: not stowing"
        G4 P0
    {% else %}
        SAVE_GCODE_STATE NAME=stow_probe
        RESPOND TYPE=command MSG="Stowing probe"

        ; ensure the probe is currently deployed; can't stow what isn't deployed.
        _ASSERT_PROBE_DEPLOYED

        G90

        ; set approach elevation for fixed gantry system to clear probe over bed
        G0 Z{euclid_probe.bed_clearance} F{z_speed}

        ; move the carraige to safe position
        G0 X{euclid_probe.position_preflight[0]} Y{euclid_probe.position_preflight[1]} F{speed}

        ; move to the exit/re-entry staging position
        G0 X{euclid_probe.position_exit[0]} Y{euclid_probe.position_exit[1]} F{speed}

        ; slowly move into dock
        G0 X{euclid_probe.position_dock[0]} Y{euclid_probe.position_dock[1]} F{speed}

        ; quick swipe off
        G0 X{euclid_probe.position_side[0]} Y{euclid_probe.position_side[1]} F{speed}

        ; move the carraige to safe position
        G0 X{euclid_probe.position_preflight[0]} Y{euclid_probe.position_preflight[1]} F{speed}

        _ASSERT_PROBE_STOWED
        RESTORE_GCODE_STATE NAME=stow_probe
    {% endif %}


# Macro to perform a modified z_tilt by wrapping it in DEPLOY_PROBE/STOW_PROBE macros
[gcode_macro Z_TILT_ADJUST]
rename_existing: Z_TILT_ADJUST_ORIG
gcode:
    DEPLOY_PROBE
    Z_TILT_ADJUST_ORIG
    STOW_PROBE

[gcode_macro PROBE_ACCURACY]
rename_existing: PROBE_ACCURACY_ORIG
gcode:
    _ASSERT_PROBE_DEPLOYED
    PROBE_ACCURACY_ORIG
